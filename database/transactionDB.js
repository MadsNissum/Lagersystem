import { db } from './firestore.js';
import { collection, getDocs, doc, deleteDoc, addDoc } from 'firebase/firestore';
import { deleteProduct, getProduct, updateProduct } from "./productDB.js";
import { addMessageToMail } from '../service/observer.js';

const transactionCollection = collection(db, 'transaction');

/**
 * Counts down products quantity, deletes if quanitity less than 1
 * @param {*} sale an object with an array of ids of products sold and their corresponding amountsold
 * @returns Status code to be sent to client
 * @author Kasper & Mads Nissum
 */
export async function registerSale(sale) {
    // CHECKER OM DER PRØVES AT SÆLGE FLERE PRODUKTER END DER ER PÅ LAGER!
    for (let i = 0; i < sale.length; i++) {
        let product = await getProduct(sale[i].id);
        let newProductQuantity = product.quantity - sale[i].amount;
        if (newProductQuantity < 0) {
            return {statusCode: 503};
        }
    }

    for (let i = 0; i < sale.length; i++) {
        let product = await getProduct(sale[i].id);
        let newProductQuantity = product.quantity - sale[i].amount;

        // Add logic for each type of product there is and when you should be notified
        if (product.quantity >= 10 && newProductQuantity < 10) {
            addMessageToMail(`Beholdning  af <b>${product.brand}</b> med ID: <b>${product.getId()}</b> er lavere 10`);
        }

        product.quantity = newProductQuantity;

        if (product.quantity == 0) {
            await deleteProduct(sale[i].id);
        } else {
            await updateProduct(sale[i].id, product.toPlainObject());
        }
    }

    let transDoc = await addTransaction(sale);
    
    return {statusCode: 200, transactionId: transDoc.id};
}

/**
 * Inserts a record of a transaction when registering a sale.
 * @param {*} sale an object with an array of ids of products sold and their corresponding amountsold
 * @author Kasper & Mads Nissum
 */
export async function addTransaction(sale) {
    for (let i = 0; i < sale.length; i++) {
        let product = await getProduct(sale[i].id);
        sale[i].location = product.location;
        sale[i].quantity = product.quantity;
    }

    let finalBon = {
        transactionDate: new Date().toISOString().split('T')[0],
        products: sale
    };

    return await addDoc(transactionCollection, finalBon);
}

/**
 * Deletes transaction with given id
 * @param {String} id Autogenerated id for transaction
 * @returns Deleted doc
 * @author Mikkel Hess & Mads Nissum
 */
export async function deleteTransaction(id) {
    const docRef = doc(db, 'transaction', id);
    return await deleteDoc(docRef);
}

/**
 * Function returns an array of products from firestore
 * @returns All transactions
 * @author Lucas Andersen & Mads Nissum
 */
export async function getTransactions() {
    return (await getDocs(transactionCollection)).docs.map(doc => {
        let transactions = doc.data();
        transactions.id = doc.id;
        transactions.productSum = () => {
            
            let sum = 0;
            transactions.products.forEach(product => {
                sum += (product.productPrice * product.amount);
            });
            return sum;
        }
        return transactions;
    });
}